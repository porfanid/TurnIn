name: Build Application Packages

on:
  push:
    branches:
      - upgraded-to-app
    paths:
      - 'src/**'  # Runs when files in src directory change
      - 'requirements.txt'  # Also runs when dependencies change
      - '.github/workflows/build_artifacts.yml'  # When the workflow itself changes
    tags:
      - 'version*'  # Run workflow on version tags

jobs:

  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Qt environment
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-xinerama0 libxcb-cursor0 libegl1 libopengl0

      - name: Set up X Virtual Frame Buffer
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxcb-xinerama0 libxcb-cursor0 libegl1 libopengl0
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Run tests
        run: |
          python -m unittest discover -s src/tests

  build-windows-exe:
    needs: run-tests
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Extract version
        id: version
        shell: python
        run: |
          import os
          import sys
          sys.path.append(os.path.join(os.getcwd(), 'src'))
          from version import VERSION
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"version={VERSION}")

      - name: Install dependencies
        run: |
          pip install pyinstaller
          pip install keyring cryptography
          pip install -r requirements.txt

      - name: Create hook file
        run: |
          mkdir -p hooks
          @'
          from PyInstaller.utils.hooks import collect_all

          # Add these modules as hidden imports
          hiddenimports = [
              'keyring',
              'keyring.backends',
              'cryptography',
              'paramiko',
              'sshtunnel',
              'sentry_sdk'
          ]

          # Collect submodules
          datas, binaries, more_imports = collect_all('keyring')
          hiddenimports.extend(more_imports)
          '@ > hooks/hook-extras.py

      # Create a separate script that fixes imports in Python files
      - name: Fix imports in Python files
        shell: powershell
        run: |
          $files = Get-ChildItem -Path src -Include *.py -Recurse
          foreach ($file in $files) {
            $content = Get-Content -Path $file.FullName
            # First, replace 'from src.' with 'from '
            $newContent = $content -replace 'from src\.', 'from '
            # Then, replace 'from ..' with 'from src.' but avoid creating 'src..' 
            $newContent = $newContent -replace '(?<!src)from \.\.', 'from src.'
            Set-Content -Path $file.FullName -Value $newContent
          }

      - name: Build Windows EXE
        shell: cmd
        run: >
          pyinstaller --name turnin --onefile --windowed --icon=cse.logo.ico
          --add-data "cse.logo.png;."
          --additional-hooks-dir=hooks
          --hidden-import=keyring
          --hidden-import=cryptography
          --hidden-import=sentry_sdk
          --hidden-import=paramiko
          --hidden-import=sshtunnel
          src/turnin.py

      - name: Upload EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: turnin-${{ steps.version.outputs.version }}-windows
          path: dist/turnin.exe

  build-debian-package:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Extract version
        id: version
        run: |
          VERSION=$(python3 -c "import sys; sys.path.append('src'); from version import VERSION; print(VERSION)")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Fix imports in Python files
        run: |
          # Create a backup of the original files
          mkdir -p backup_src
          cp -r src backup_src/
          
          # Find and fix all import statements
          find src -name "*.py" -exec sed -i 's/from src\./from /g' {} \;
          find src -name "*.py" -exec sed -i 's/from \.\./from src./g' {} \;

      - name: Prepare Debian package directory
        run: |
          mkdir -p turnin/DEBIAN
          # Create control file
          cat > turnin/DEBIAN/control << EOF
          Package: turnin
          Version: ${{ env.VERSION }}
          Architecture: all
          Maintainer: Pavlos Orfanidis <pavlos@orfanidis.net.gr>
          Description: TurnIn App for submitting assignments
          Depends: python3-sshtunnel, python3-paramiko, python3-sentry-sdk, python3-pyqt6, python3-requests, python3-keyring, python3-cryptography
          EOF
          
          # Create postinst script to set proper permissions
          cat > turnin/DEBIAN/postinst << EOF
          #!/bin/sh
          chmod 755 /usr/bin/turnin
          mkdir -p /var/log/turnin
          chmod 777 /var/log/turnin
          exit 0
          EOF
          chmod +x turnin/DEBIAN/postinst
          
          # Create logs directory
          mkdir -p turnin/var/log/turnin
          chmod 777 turnin/var/log/turnin
          
          # Create wrapper script that includes PYTHONPATH
          mkdir -p turnin/usr/bin
          cat > turnin/usr/bin/turnin << EOF
          #!/bin/bash
          export PYTHONPATH=/usr/share/turnin
          python3 /usr/share/turnin/turnin.py "\$@"
          EOF
          chmod +x turnin/usr/bin/turnin
          
          # Create application directory
          mkdir -p turnin/usr/share/turnin
          
          # Copy all Python files preserving original structure
          cp -r src/* turnin/usr/share/turnin/
          
          # Create empty __init__.py files for proper package structure
          find turnin/usr/share/turnin -type d -exec touch {}/__init__.py \;
          
          # Copy resources
          cp cse.logo.png turnin/usr/share/turnin/
          
          # Create desktop file
          mkdir -p turnin/usr/share/applications
          cat > turnin/usr/share/applications/turnin.desktop << EOF
          [Desktop Entry]
          Name=TurnIn
          Exec=/usr/bin/turnin
          Icon=/usr/share/icons/turnin/cse.logo.png
          Type=Application
          Categories=Education;Development;
          EOF
          
          # Copy icon
          mkdir -p turnin/usr/share/icons/turnin
          cp cse.logo.png turnin/usr/share/icons/turnin/

      - name: Build Debian package
        run: dpkg-deb --build turnin

      - name: Upload DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: turnin-${{ env.VERSION }}-debian
          path: turnin.deb


  create-release:
    needs: [ build-windows-exe, build-debian-package ]
    runs-on: ubuntu-latest
    # Only run on tag pushes
    steps:
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4

      - name: Extract version
        id: version
        run: |
          VERSION=$(python3 -c "import sys; sys.path.append('src'); from version import VERSION; print(VERSION)")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: List downloaded artifacts
        run: |
          find . -type f -name "*.exe" -o -name "*.deb"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: true

      - name: Upload Windows Executable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./turnin-${{ steps.get_version.outputs.VERSION }}-windows/turnin.exe
          asset_name: turnin-${{ steps.get_version.outputs.VERSION }}-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Debian Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./turnin-${{ steps.get_version.outputs.VERSION }}-debian/turnin.deb
          asset_name: turnin-${{ steps.get_version.outputs.VERSION }}-debian.deb
          asset_content_type: application/vnd.debian.binary-package